import requests
from bs4 import BeautifulSoup
import csv
import re
from win10toast import ToastNotifier
from datetime import datetime

"""
Pour un lancement quotidien du script:
schtasks /create /sc daily /tn "Linux Kernel CVE Feed" /tr "C:/Users/htnf1122/AppData/Local/Microsoft/WindowsApps/python3.8.exe c:/Users/htnf1122/Documents/Cortex/feed_cve_linux.py" /st 09:30
"""

# One-time initialization
toaster = ToastNotifier()

#Get current date
today = datetime.today().strftime('%Y-%m-%d')
#Get Current time in int object
datem = datetime.strptime(today, '%Y-%m-%d')


#Get Linux CVE from this year with a score between 7 and 10
cve_details_brute = requests.get("https://www.cvedetails.com/vulnerability-list.php?vendor_id=33&product_id=&version_id=&page=1&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=7&cvssscoremax=10&year="+str(datem.year)+"&month=0&cweid=0&order=3&trc=99&sha=0b4324a03d1611b238026b0d9c1402ae680bada2")

#Get brute data from the website https://www.cvedetails.com
soup = BeautifulSoup(cve_details_brute.text,'html.parser')
cve_table = soup.find_all("table",{"id": "vulnslisttable"})
cve_summary_brute = soup.find_all("td",{"class": "cvesummarylong"})
cve_title_brute = soup.find_all("a")
cve_score_brute = soup.find_all("div",{"class":"cvssbox"})
cve_date_brute = soup.find_all("td")

cve_summary,cve_title,cve_score,cve_update_date = [],[],[],[]

#Populate CVE Title array
for title in cve_title_brute:
    if "CVE-" in title.text:
        cve_title.append(title.text)

#Populate CVE Summary array
for sum in cve_summary_brute:
    tmp = sum.text
    tmp = tmp.strip("\n").strip("\t\t\t\t\t")
    cve_summary.append(tmp)

#Populate CVE Score array
for score in cve_score_brute:
    cve_score.append(score.text)

#Populate CVE Update Date array
#Update date seems to be more accurate at a score level or any change that could happens
i=0
for date in cve_date_brute:
    if re.match("\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])",date.text):
        #Ignore Publish Date
        if i%2==1:
            cve_update_date.append(date.text)
        i+=1
        

#Write these informations in a csv file
with open('kernel_cve_linux_feed.csv','w', encoding='UTF8') as f:
    writer = csv.writer(f)
    writer.writerow(['CVE','Date','Score','Summary'])
    for i in range(0,len(cve_title)):
        writer.writerow([cve_title[i],cve_update_date[i],cve_score[i],cve_summary[i]])
        date_today = datetime.strptime(today, '%Y-%m-%d')
        date_cve = datetime.strptime(cve_update_date[i], '%Y-%m-%d')
        date_difference = date_today-date_cve
        
        #If CVE is fresh of less than 4 days, pop a notif
        if date_difference.days < 4:
            toaster.show_toast("New Linux Kernel CVE", cve_title[i], threaded=True,icon_path=None, duration=5)